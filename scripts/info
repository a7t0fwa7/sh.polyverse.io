#!/bin/sh

SHORT_DESCRIPTION="Output basic information about your host."

#******************************************************************************#
#                                 main                                         #
#******************************************************************************#

main() {
	echo "DISTRO=$(getDistro)"
	echo "RELEASE=$(getRelease)"
	echo "VERSION_ID=$(getReleaseVer)"
	echo "ARCH=$(getArch)"
	echo "PACKAGE_MANAGER=$(getPackageManager)"
	echo "FORMAT=$(getFormat $PACKAGE_MANAGER)"
	echo "WHOAMI=$(whoami)"
	echo "HOSTNAME=$HOSTNAME"
	echo "KERNEL_NAME=$(getKernelName)"
	echo "KERNEL_RELEASE=$(getKernelRelease)"
}

#******************************************************************************#
#                               functions                                      #
#******************************************************************************#

getDistro() {
	if [ -f "/etc/os-release" ]; then
		# there's usually a line like 'ID=alpine'
		_DISTRO="$(cat /etc/os-release | grep "^ID=" | cut -d '=' -f2 | tr -d '"')"
		if [ ! -z "${_DISTRO}" ]; then
			echo "${_DISTRO}"
			return 0
		fi
	fi

	if [ -f "/etc/system-release" ]; then
		# centos 6 has a single line. e.g., 'CentOS release 6.10 (Final)'
		if [ ! -z "$(cat /etc/system-release | grep ^CentOS)" ]; then
			echo "centos"
			return 0
		fi

		# rhel 6 has a single line. e.g., 'Red Hat Enterprise Linux Server release 6.10 (Santiago)'
		if [ ! -z "$(cat /etc/system-release | grep ^Red)" ]; then
			echo "rhel"
			return 0
		fi
	fi

	# unable to determine distro
	return 1
}

getRelease() {
	_DISTRO="$(getDistro)"
	_RELEASEVER="$(getReleaseVer)"

	case "$_DISTRO" in
		alpine)
			# make 3.x vs 3.x.x
			echo $_RELEASEVER | awk -F'.' '{print $1"."$2}'
			;;
		centos|fedora|rhel)
			# make 7 vs. 7.6
			echo $_RELEASEVER | awk -F'.' '{print $1}'
			;;
		ubuntu)
			_RELEASE="$(cat /etc/*-release 2>/dev/null | grep "^DISTRIB_CODENAME=" | cut -d '=' -f2 | tr -d '"')"
			if [ -z "$_RELEASE" ]; then return 1; fi

			echo "$_RELEASE"
			;;
		*)
			echo "$_RELEASEVER"
			;;
	esac

	return 0
}

getReleaseVer() {
	if [ -f "/etc/system-release" ]; then
		# example: CentOS release 6.10 (Final)
		_RELEASEVER="$(cat /etc/system-release | grep "^CentOS.* release" | sed 's/^CentOS.* release //' | awk '{print $1}')"
		if [ ! -z "${_RELEASEVER}" ]; then
			echo "${_RELEASEVER}"
			return 0
		fi

		# example: Red Hat Enterprise Linux Server release 6.10 (Santiago)
		_RELEASEVER="$(cat /etc/system-release | grep "^Red.* release" | sed 's/^Red.* release //' | awk '{print $1}')"
		if [ ! -z "${_RELEASEVER}" ]; then
			echo "${_RELEASEVER}"
			return 0
		fi
	fi

	if [ -f "/etc/os-release" ]; then
	        _RELEASE="$(cat /etc/os-release 2>/dev/null | grep "VERSION_ID=" | cut -d "=" -f2 | tr -d '"')"
        	if [ ! -z "$_RELEASE" ]; then
                	echo "$_RELEASE"
                	return 0
       		fi
	fi

	return 1
}

getKernelRelease() {
	uname -r
	return $?
}

getKernelName() {
	uname -s
	return $?
}

getArch() {
	# if a value is passed in, then echo it back out.
	if [ ! -z "$1" ]; then
		echo "$1"
		return 0
	fi

	# on alpine, apk uses the value in this file to determine the arch for constructing the package url
	if [ -f "/etc/apk/arch" ]; then
		cat /etc/apk/arch
		return 0
	fi

	dpkg --version >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		dpkg --print-architecture
		return $?
	fi

	uname -m
	return $?
}

getFormat() {
	_PACKAGE_MANAGER="$1"
	if [ -z "${_PACKAGE_MANAGER}" ]; then
		_PACKAGE_MANAGER="$(getPackageManager)"
	fi

	case "${_PACKAGE_MANAGER}" in
		yum|dnf)
			echo "rpm"
			return 0
			;;
		apt|apt-get)
			echo "deb"
			return 0
			;;
		apk)
			echo "apk"
			return 0
			;;
	esac

	return 1
}

getPackageManager() {
        yum >/dev/null 2>&1
        if [ $? -ne 127 ]; then
                echo "yum"
                return 0
        fi

        dnf >/dev/null 2>&1
        if [ $? -ne 127 ]; then
                echo "dnf"
                return 0
        fi

        apt >/dev/null 2>&1
        if [ $? -ne 127 ]; then
                echo "apt"
                return 0
        fi

        apt-get >/dev/null 2>&1
        if [ $? -ne 127 ]; then
                echo "apt-get"
                return 0
        fi

        apk >/dev/null 2>&1
        if [ $? -ne 127 ]; then
                echo "apk"
                return 0
        fi

        return 1
}


if [ -z "$PV_DEFINE_INCLUDE" ]; then
	main "$@"
	exit $?
fi
