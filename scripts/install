#!/bin/sh

SHORT_DESCRIPTION="Install Polymorphic Linux"

# ./build.sh will replace GITSHA with actual commit sha
export PV_GITSHA=GITSHA

export PV_KEY_SHA256SUM_APK=d0959d896ef81e325d631c6b46905108a71c3c2e017b7327328a2c3347580b6f
export PV_KEY_SHA256SUM_DEB=c1aa52267295abe39faa4027d9a49936aae51d72f9dcb9f8a8cbf0682b03223c
export PV_KEY_SHA256SUM_RPM=fc113ae1cbf1e0ddc74aaca659012e887599cccccdb19294f65d94d4c1048422

# set the environment variable PV_BASE_URL to test non-prod version
if [ -z "$PV_BASE_URL" ]; then PV_BASE_URL="https://sh.polyverse.io"; fi

#******************************************************************************#
#                                 main                                         #
#******************************************************************************#

main() {
	# check a few pre-requisites

	if [ "$(uname -s 2>/dev/null)" != "Linux" ]; then
		_echo "Installation must be performed on a Linux system."
		return 1
	fi

	curl >/dev/null 2>&1
	if [ $? -eq 127 ]; then
		_echo "This script requires curl. Please install it and try running this again."
		return 1
	fi

	if [ $(id -u) -ne 0 ]; then
		_echo "This script must be run as root. Please try running this again as a sudo or root user."
		return 1
	fi

	_echo "Polyverse polymorphic version of LinuxÂ® install script (commit: $PV_GITSHA)"

	# process command-line which is used to set global PV_ variables
	parseCommandLine "$@"
	if [ $? -ne 0 ]; then return 1; fi

	# the only PV_ variable that's required is the authkey
	if [ -z "$PV_AUTHKEY" ]; then
		usage
		return 1
	fi

	# `curl https://sh.polyverse.io | sh -s info` to collect linux distro details; response looks like:
	# 
	# DISTRO=rhel
	# RELEASE=6
	# VERSION_ID=6.10
	# ARCH=x86_64
	# PACKAGE_MANAGER=yum
	# FORMAT=rpm
	# HOSTNAME=6942790f8a5d
	#
	PV_INFO="$(curl -s $PV_BASE_URL/main.sh | PV_BASE_URL=$PV_BASE_URL sh -s info)"
	if [ $? -ne 0 ]; then
		_echo "Unable to determine Linux distribution details. Please contact support@polyverse.io."
		return 1
	fi

	# set variables based on sh.polyverse.io info output unless already set via command-line
	export PV_NODEID="$(parseInfoIfNeeded "$PV_NODEID" HOSTNAME "$PV_INFO")"
	export PV_DISTRO="$(parseInfoIfNeeded "$PV_DISTRO" DISTRO "$PV_INFO")"
	export PV_FORMAT="$(parseInfoIfNeeded "$PV_FORMAT" FORMAT "$PV_INFO")"
	export PV_RELEASE="$(parseInfoIfNeeded "$PV_RELEASE" RELEASE "$PV_INFO")"
	export PV_VERSION_ID="$(parseInfoIfNeeded "$PV_VERSION_ID" VERSION_ID "$PV_INFO")"
	export PV_ARCH="$(parseInfoIfNeeded "$PV_ARCH" ARCH "$PV_INFO")"

	_debugln "$(env | grep ^PV_)"

	RESULT="$(getKeyInstallationInfo --authkey $PV_AUTHKEY --nodeid $PV_NODEID --distro $PV_DISTRO --format $PV_FORMAT --release $PV_RELEASE --arch $PV_ARCH)"
	_debugln "RESULT: $RESULT"
	if [ $? -eq 0 ]; then
		export PV_KEY_SHA256SUM="$(echo "$RESULT" | awk '{print $1}')"
		export PV_KEY_URL="$(echo "$RESULT" | awk '{print $2}')"
		export PV_KEY_LOCATION="$(echo "$RESULT" | awk '{print $3}')"
	fi
	_debugln "PV_KEY_SHA256SUM: $PV_KEY_SHA256SUM, PV_KEY_URL: $PV_KEY_URL, PV_KEY_LOCATION: $PV_KEY_LOCATION"

	# generate the default PFRACs for this distro/format/release/arch; usually something like os and updates
	PV_PFRACs="$(generateDefaultPFRACs "$PV_DISTRO" "$PV_FORMAT" "$PV_RELEASE" "$PV_ARCH")"
	if [ $? -ne 0 ]; then
		# if generateDefaultPFRACs returned non-zero, that means it's an unsupported distro/format/release/arch
		# but we still want to attempt to register so that we have visibility into what's being requested
		_debugln "Creating default PFRAC."
		PV_PFRACs="$(encode "$PV_DISTRO")_${PV_FORMAT}_${PV_RELEASE}_$(encode "${PV_ARCH}")_default"
	fi

	# support for --add-components (e.g., "--add-components kernel")
	if [ ! -z "PV_COMPONENTS" ]; then
		RESULT="$(generateComponentsPFRACs "$PV_DISTRO" "$PV_FORMAT" "$PV_RELEASE" "$PV_ARCH" "$PV_COMPONENTS")"
		if [ $? -ne 0 ]; then
			# RESULT contains the error message
			echo "$RESULT"
			return 1
		else
			# RESULT contains the additional PFRACs that we want to concetenate to PV_PFRACs
			PV_PFRACs="$PV_PFRACs $RESULT"
		fi
	fi

	_debugln "PV_PFRACs=$PV_PFRACs"

	for PFRAC in $PV_PFRACs; do
		P="$(decode $(echo $PFRAC | awk -F'_' '{print $1}'))"
		F="$(decode $(echo $PFRAC | awk -F'_' '{print $2}'))"
		R="$(decode $(echo $PFRAC | awk -F'_' '{print $3}'))"
		A="$(decode $(echo $PFRAC | awk -F'_' '{print $4}'))"
		C="$(decode $(echo $PFRAC | awk -F'_' '{print $5}'))"

		URL="https://repo.polyverse.io/register?authKey=$PV_AUTHKEY&nodeID=$PV_NODEID_$PFRAC&nodeName=$PV_NODEID&distro=$PV_DISTRO&project=$P&format=$F&release=$R&arch=$A&component=$C&version_id=$PV_VERSION_ID&gitsha=$PV_GITSHA"
		_debugln "$URL"

		# 'wget --content-on-error -qO- "$URL"' doesn't work reliably across distros
		COMPONENT_FILE_PART="$(curl -s --insecure --fail -H 'Authorization: $PV_AUTHKEY' "$URL")"
		EXIT_CODE=$?

		if [ $EXIT_CODE -ne 0 ]; then
			# can't get errror code and body at the same time, so need to fetch the error message
			RESULT="$(curl -s --insecure "$URL")"
			_echo "Registration error: $RESULT"
			return 1
		fi

		REPO_FILE_CONTENTS="${REPO_FILE_CONTENTS}${COMPONENT_FILE_PART}\n\n"
	done

	_debugln "REPO_FILE_CONTENTS:"
	_debugln "$REPO_FILE_CONTENTS"

	${PV_FORMAT}_install "$REPO_FILE_CONTENTS"
	return $?
}

#******************************************************************************#
#                               functions                                      #
#******************************************************************************#

_echo() {
	(>&2 echo "$1")
}

_debugln() {
	if [ ! -z "$PV_DEBUG" ]; then
		_echo "$1"
	fi
}

usage() {
	cat >&2 <<-EOF

	Usage:

	   curl https://sh.polyverse.io | sh -s install <authkey> [<options>]

	Options:

	  --help                 Display usage.

	You can obtain a free trial authkey at https://polyverse.io.

EOF
}

parseInfo() {
	_KEY="$1"
	_INFO="$2"

	if [ -z "${_KEY}" ] || [ -z "${_INFO}" ]; then
		echo "parseInfo() missing required arguments."
		return 1
	fi

	_VAL="$(echo "$_INFO" | grep "^${_KEY}=" | cut -d "=" -f2 | tr -d '"')"

	if [ -z "${_VAL}" ]; then
		echo "parseInfo() info value missing key '${_KEY}'."
		return 1
	fi

	echo "${_VAL}"
	return 0
}

parseInfoIfNeeded() {
	_CURRENT="$1"
	_KEY="$2"
	_INFO="$3"

	if [ ! -z "${_CURRENT}" ]; then
		echo "${_CURRENT}"
		return 0
	fi

	parseInfo "${_KEY}" "${_INFO}"
	return $?
}

parseCommandLine() {
	if [ "$1" = "install" ]; then
		shift
	fi

	while [ $# -gt 0 ]; do
		case "$1" in
			--arch)
				shift
				export PV_ARCH="$1"
				;;
			--distro)
				shift
				export PV_DISTRO="$1"
				;;
			--format)
				shift
				export PV_FORMAT="$1"
				;;
			--release)
				shift
				export PV_RELEASE="$1"
				;;
			--nodeid)
				shift
				export PV_NODEID="$1"
				;;
			--help)
				usage
				return 1
				;;
			--add-component)
				shift
				export PV_COMPONENTS="$PV_COMPONENTS $1"
				;;
			--dry-run)
				export PV_DRY_RUN="true"
				;;
			--debug)
				export PV_DEBUG="true"
				;;
			*)
				if [ -z "$PV_AUTHKEY" ]; then
					export PV_AUTHKEY="$1"
				elif [ -z "$PV_NODEID" ]; then
					export PV_NODEID="$1"
				else
					echo "Error: unexpected argument '$1'."
					return 1
				fi
		esac
		shift
	done

	return 0
}

getKeyInstallationInfo() {
	while [ $# -gt 0 ]; do
		case "$1" in
			--authkey)
				shift
				_PV_AUTHKEY="$1"
				;;
			--nodeid)
				shift
				_PV_NODID="$1"
				;;
			--distro)
				shift
				_PV_DISTRO="$1"
				;;
			--format)
				shift
				_PV_FORMAT="$1"
				;;
			--release)
				shift
				_PV_RELEASE="$1"
				;;
			--arch)
				shift
				_PV_ARCH="$1"
				;;
			*)
				echo "Error: unhandled getKeyInstallationInfo() argument '$1'."
				return 1
				;;
		esac
		shift
	done

	if [ -z "$_PV_FORMAT" ]; then
		echo "Error: getKeyInstallationInfo() requires the --format argument."
		return 1
	fi

	case "$_PV_FORMAT" in
		apk)
			_KEY_SHA256SUM="d0959d896ef81e325d631c6b46905108a71c3c2e017b7327328a2c3347580b6f"
			_KEY_URL="https://repo.polyverse.io/config/apk/3/key"
			_KEY_INSTALL_LOCATION="/etc/apk/keys/support@polyverse.io-5992017d.rsa.pub"
			;;
		deb)
			_KEY_SHA256SUM="c1aa52267295abe39faa4027d9a49936aae51d72f9dcb9f8a8cbf0682b03223c"
			_KEY_URL="http://git-sh.polyverse.io-kernel.s3-website-us-west-2.amazonaws.com/keys/c1aa52267295abe39faa4027d9a49936aae51d72f9dcb9f8a8cbf0682b03223c"
			_KEY_INSTALL_LOCATION="/etc/apt/c1aa52267295abe39faa4027d9a49936aae51d72f9dcb9f8a8cbf0682b03223c"
			;;
		rpm)
			_KEY_SHA256SUM="fc113ae1cbf1e0ddc74aaca659012e887599cccccdb19294f65d94d4c1048422"
			_KEY_URL="https://repo.polyverse.io/config/rpm/7/key"
			_KEY_INSTALL_LOCATION="/etc/pki/rpm-gpg/RPM-GPG-KEY-Polyverse"
			;;
		*)
			echo "Error: getKeyInstallationInfo() doesn't currently support format '${_PV_FORMAT}'."
			return 1
			;;
	esac

	echo "$_KEY_SHA256SUM ${_KEY_URL} ${_KEY_INSTALL_LOCATION}"
	return 0
}

downloadAndInstallKey() {
	_FORMAT="$1"
	_KEY_SHA256SUM="$2"
	_KEY_URL="$3"
	_KEY_INSTALL_LOCATION="$4"

	if [ $# -ne 4 ]; then
		echo "Error: downloadAndInstallKey() requires 4 arguments but received '$#'."
		return 1
	fi

	curl -s --fail ${_KEY_URL} -o ${_KEY_INSTALL_LOCATION}
	if [ $? -ne 0 ]; then
		echo "Error: 'curl ${_KEY_URL} -o ${_KEY_INSTALL_LOCATION}' returned non-zero."
		return 1
	fi

	_CHECK_SHA256SUM="$(sha256sum ${_KEY_INSTALL_LOCATION} | awk '{print $1}')"
	if [ "${_CHECK_SHA256SUM}" != "${_KEY_SHA256SUM}" ]; then
		echo "Error: sha256sum of '${_KEY_INSTALL_LOCATION}' is '${_CHECK_SHA256SUM}'; expecting '${_KEY_SHA256SUM}'."
		return 1
	fi

	case "${_FORMAT}" in
		apk|rpm)
			# do nothing
			;;
		deb)
			apt-key add ${_KEY_INSTALL_LOCATION} >/dev/null 2>&1
			if [ $? -ne 0 ]; then
				echo "Error: 'apt-key add ${_KEY_INSTALL_LOCATION} returned non-zero."
				return 1
			fi
			if [ -z "$(apt-key list | grep Polyverse)" ]; then
				echo "Error: 'apt-key list' doesn't show a key from Polyverse."
				return 1
			fi
			;;
		*)
			echo "Error: downloadAndInstallKey() doesn't support format '${_FORMAT}'."
			return 1
			;;
	esac

	return 0
}

generateDefaultPFRACs() {
	if [ $# -ne 4 ]; then
		_echo "Error: generatePFRACs() missing required arguments."
		return 1
	fi

	_DISTRO="$1"
	_FORMAT="$2"
	_RELEASE="$3"
	_ARCH="$4"

	_PFRACs=""
	case ${_DISTRO} in
		alpine)
			_PFRACs="${_PFRACs} ${_DISTRO}_apk_${_RELEASE}_$(encode ${_ARCH})_main"
			_PFRACs="${_PFRACs} ${_DISTRO}_apk_${_RELEASE}_$(encode ${_ARCH})_community"
			;;
		centos|fedora)
			_PFRACs="${_PFRACs} ${_DISTRO}_rpm_${_RELEASE}_$(encode ${_ARCH})_os"
			_PFRACs="${_PFRACs} ${_DISTRO}_rpm_${_RELEASE}_$(encode ${_ARCH})_updates"
			;;
		rhel)
			_PFRACs="${_PFRACs} ${_DISTRO}_rpm_${_RELEASE}_$(encode ${_ARCH})_server"
			;;
		ubuntu)
			_PFRACs="${_PFRACs} ${_DISTRO}_deb_${_RELEASE}_binary--$(encode ${_ARCH})_main"
			_PFRACs="${_PFRACs} ${_DISTRO}_deb_${_RELEASE}-updates_binary--$(encode ${_ARCH})_main"
			_PFRACs="${_PFRACs} ${_DISTRO}_deb_${_RELEASE}-security_binary--$(encode ${_ARCH})_main"
			;;
		*)
			return 1
			;;
	esac

	# echo'ing without quotes will remove leading/trailing whitespaces
	echo ${_PFRACs}
	return 0
}

generateComponentsPFRACs() {
	if [ $# -ne 5 ]; then
		_echo "Error: generateComponentsPFRACs() incorrect number of arguments: $#"
		return 1
	fi

	_DISTRO="$1"
	_FORMAT="$2"
	_RELEASE="$3"
	_ARCH="$4"
	_COMPONENTS="$5"

	_PFRACs=""

	for _COMPONENT in ${_COMPONENTS}; do
		case ${_COMPONENT} in
			kernel)
				case ${_DISTRO} in
					centos|fedora|rhel)
						_PFRACs="${_PFRACs} ${_DISTRO}_rpm_${_RELEASE}_$(encode ${_ARCH})_os-kernel"
						_PFRACs="${_PFRACs} ${_DISTRO}_rpm_${_RELEASE}_$(encode ${_ARCH})_updates-kernel"
						;;
					*)
						echo "Error: component '${_COMPONENT}' not supported on distro '${_DISTRO}'."
						return 1
						;;
				esac
				;;
			*)
				echo "Error: unknown component '${_COMPONENT}'."
				return 1
				;;
		esac
	done

	# echo'ing without quotes will remove leading/trailing whitespaces
	echo ${_PFRACs}
	return 0
}

encode() {
	str="$1"
	str="$(echo $str | sed 's/ /++/g')"
	str="$(echo $str | sed 's/_/--/g')"
	str="$(echo $str | sed 's/\//\^\^/g')"
	echo "$str"
}

decode() {
	str="$1"
	str="$(echo $str | sed 's/++/ /g')"
	str="$(echo $str | sed 's/--/_/g')"
	str="$(echo $str | sed 's/\^\^/\//g')"
	echo "$str"
}

display_reinstall_cmd() {
	echo
	echo "Installation successful! Polyverse is now your preferred repo!"
	echo
	echo "From this point forward, any package you install (or re-install) will be secured"
	echo "by Polyverse."
	echo
	echo "More information available at:"
	echo
	echo "  https://polyverse.io/polymorphic-linux-installation-guide/"
	echo
	echo "If you have any questions, you can reach us at support@polyverse.io."
	echo
}

installPolyverseKey() {
	_FORMAT="$1"
	_KEY_SHA256SUM="$2"

	_debugln "installPolyverseKey() ${_FORMAT} ${_KEY_SHA256SUM}"

	case "${_KEY_SHA256SUM}" in
		d0959d896ef81e325d631c6b46905108a71c3c2e017b7327328a2c3347580b6f)
			if [ "${_FORMAT}" != "apk" ]; then
				echo "Error: Key with sha256sum '${_KEY_SHA256SUM}' is only for apk-based package management systems: ${_FORMAT}."
				return 1
			fi
			_KEY_URL="https://repo.polyverse.io/config/apk/3/key"
			_KEY_LOCATION="/etc/apk/keys/support@polyverse.io-5992017d.rsa.pub"
			;;
		*)
			echo "Error: Unknown key with sha256sun '${_KEY_SHA256SUM}'."
			return 1
			;;
	esac

	_debugln "installPolyverseKey() _FORMAT: ${_FORMAT}, _KEY_URL: ${_KEY_URL}, _KEY_LOCATION: ${_KEY_LOCATION}"

	case "${_FORMAT}" in
		apk)
			_KEY_LOCATION="/etc/apk/keys/support@polyverse.io-5992017d.rsa.pub"
			curl -s https://repo.polyverse.io/config/apk/3/key -o "${_KEY_LOCATION}"
			if [ $? -ne 0 ]; then
				echo "Error: encountered issue downloading/installing Polyverse key."
				return 1
			fi

			_SHA256SUM="$(sha256sum "${_KEY_LOCATION}" | awk '{print $1}')"
			if [ $? -ne 0 ]; then
				echo "Error: encountered issue calculating sha256sum of key."
				return 1
			fi

			if [ "$_SHA256SUM" != "${_KEY_SHA256SUM}" ]; then
				echo "Error: sha256sum mismatch. Expecting '${_KEY_SHA256SUM}' but got '$_SHA256SUM'. Please contact support@polyverse.io."
				return 1
			fi

			echo "${_SHA256SUM}"
			return 0
			;;
		deb)
			echo "TBI"
			_SHA256SUM="$(apt-key export 067A5E87 2>/dev/null | sha256sum | awk '{print $1}')"
			
			return 0
			;;
		rpm)
			_KEY_LOCATION="/etc/pki/RPM-GPG-KEY-Polyverse"
			curl -s https://repo.polyverse.io/config/rpm/7/key -o "${_KEY_LOCATION}"
			if [ $? -ne 0 ]; then
				echo "Error: encountered issue downloading/installing Polyverse key."â
				return 1
			fi

			_SHA256SUM="$(sha256sum "${_KEY_LOCATION}" | awk '{print $1}')"
			if [ $? -ne 0 ]; then
				echo "Error: encountered issue calculating sha256sum of key."
				return 1
			fi

			echo "${_SHA256SUM}"
			return 0
			;;
		*)
			echo "Error: installPolyverseKey() does not support package format '${_FORMAT}'."
			return 1
			;;
	esac
}

apk_install() {
	FILE='/etc/apk/repositories'

	# download/install the key
	curl -s https://repo.polyverse.io/config/apk/3/key -o "/etc/apk/keys/support@polyverse.io-5992017d.rsa.pub"

	# make sure the default repo file exists
	if [ ! -f "$FILE" ]; then
		echo "The default repo file '$FILE' is missing. This is unexpected, so exiting..."
		exit 1
	fi

	# create a backup file
	if [ ! -f "${FILE}.pvbak" ]; then
		echo "Backing up $FILE to ${FILE}.pvbak..."
		cp $FILE ${FILE}.pvbak
		if [ $? -ne 0 ]; then
			echo "Unable to create backup file. This is unexpected, so exiting..."
			exit 1
		fi
	else
		echo "Backup file ${FILE}.pvbak already exists, so we'll leave it alone."
	fi

	# check if there's a previous repo.polyverse.io entry in /etc/apk/repositories file. support script being run multiple times.
	RESULT="$(cat $FILE | grep -i polyverse)"
	if [ ! -z "$RESULT" ]; then
		echo "Detected previous entry for repo.poyverse.io. Restoring from ${FILE}.pvbak..."
		cp ${FILE}.pvbak ${FILE}
	fi

	# Update the repositories file
	ESCAPED_TEXT="$(echo "$1" | sed 's/\//\\\//g' | sed 's/$/\\n/' | tr -d '\n')"
	sed -i "1s/^/$ESCAPED_TEXT/" $FILE
	if [ $? -ne 0 ]; then
		echo "The Polyverse repo did not install correctly. Restoring backup. Please contact us at support@polyverse.io."
		mv ${FILE}.pvbak ${FILE}
		if [ $? -ne 0 ]; then
			"Encountered an issue moving the file '${FILE}.pvbak' to '$FILE'. Please perform this manually to complete the rollback."
		fi

		exit 1
	fi

	# Make sure mirrors.polyverse.io uses http instead of https
	sed -i 's/^https.*mirrors\.polyverse\.io/http:\/\/mirrors.polyverse.io/g' $FILE

	# Comment out all the lines that aren't repo.polyverse.io. After re-installing all packages, user must remove #
	sed -in '/repo.polyverse.io/! s/^/#/' $FILE

	display_reinstall_cmd "apk update && apk upgrade --update-cache --available && sed -in 's/^#//g' /etc/apk/repositories"
}

rpm_install() {
	FILE='/etc/yum.repos.d/polyverse.repo'

	curl -s https://repo.polyverse.io/config/rpm/7/key -o "/etc/pki/RPM-GPG-KEY-Polyverse"

	printf "$1" > $FILE

	# check that the file was installed properly
	if [ ! -f "$FILE" ]; then
		echo "The Polyverse repo did not install correctly, please try again or contact Polyverse support. Exiting..."
		exit 1
	fi

	display_reinstall_cmd "yum reinstall -y \*"
}

deb_install() {
	FILE='/etc/apt/sources.list'

	# make sure the default repo file exists
	if [ ! -f "$FILE" ]; then
		echo "The default repo file '$FILE' is missing. This is unexpected, so exiting..."
		exit 1
	fi

	# create a backup file
	if [ ! -f "${FILE}.pvbak" ]; then
		echo "Backing up $FILE to ${FILE}.pvbak..."
		cp $FILE ${FILE}.pvbak
		if [ $? -ne 0 ]; then
			echo "Unable to create backup file. This is unexpected, so exiting..."
			exit 1
		fi
	else
		echo "Backup file ${FILE}.pvbak already exists, so we'll leave it alone."
	fi

	echo "Updating apt cache to insure we get the latest versions."
	apt -qq update

	echo "Installing apt-transport-https to support the https repo endpoint."
	apt -qq install apt-transport-https -y

	echo "Installing the Polyverse public repo key."
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 067A5E87

	# check if there's a previous repo.polyverse.io entry in /etc/apt/sources.list file. support script being run multiple times.
	RESULT="$(cat /etc/apt/sources.list | grep -i polyverse)"
	if [ ! -z "$RESULT" ]; then
		echo "Detected previous entry for repo.poyverse.io. Restoring from ${FILE}.pvbak..."
		cp ${FILE}.pvbak ${FILE}
	fi

	# Update the sources.list file
	ESCAPED_TEXT="$(echo "$1" | sed 's/\//\\\//g' | sed 's/$/\\n/' | tr -d '\n')"
	sed -i "1s/^/$ESCAPED_TEXT/" $FILE
	if [ $? -ne 0 ]; then
		echo "The Polyverse repo did not install correctly. Restoring backup. Please contact us at support@polyverse.io."
		mv ${FILE}.pvbak ${FILE}
		if [ $? -ne 0 ]; then
			"Encountered an issue moving the file '${FILE}.pvbak' to '$FILE'. Please perform this manually to complete the rollback."
		fi
		exit 1
	fi

	display_reinstall_cmd "apt-get update && apt-get -y --allow-change-held-packages install --reinstall \$(dpkg --get-selections | awk '{print \$1}')"
}

if [ -z "$PV_DEFINE_INCLUDE" ]; then
	main "$@"
	exit $?
fi
